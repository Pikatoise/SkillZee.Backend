// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkillZee.Infrastructure.DAL;

#nullable disable

namespace SkillZee.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(SkillZeeDbContext))]
    partial class SkillZeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AreaWorkerInfo", b =>
                {
                    b.Property<Guid>("WorkerAreasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerInfosId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkerAreasId", "WorkerInfosId");

                    b.HasIndex("WorkerInfosId");

                    b.ToTable("AreaWorkerInfo");
                });

            modelBuilder.Entity("SkillWorkerInfo", b =>
                {
                    b.Property<Guid>("WorkerInfosId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkerSkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkerInfosId", "WorkerSkillsId");

                    b.HasIndex("WorkerSkillsId");

                    b.ToTable("SkillWorkerInfo");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.BalanceTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BalanceTransaction");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("OrderSpeedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<double>("Reward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderSpeedId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.OrderResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte?>("CustomerScore")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TipId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalReward")
                        .HasColumnType("double precision");

                    b.Property<byte?>("WorkerScore")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderResult");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.OrderSpeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("RewardMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("OrderSpeed");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId")
                        .IsUnique();

                    b.ToTable("Tip");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SuccessOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("WorkerInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.WorkerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.ToTable("WorkerInfo");
                });

            modelBuilder.Entity("AreaWorkerInfo", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.Area", null)
                        .WithMany()
                        .HasForeignKey("WorkerAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillZee.Domain.Entities.WorkerInfo", null)
                        .WithMany()
                        .HasForeignKey("WorkerInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillWorkerInfo", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.WorkerInfo", null)
                        .WithMany()
                        .HasForeignKey("WorkerInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillZee.Domain.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("WorkerSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.BalanceTransaction", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.User", "User")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Order", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.Area", "Area")
                        .WithMany("Orders")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillZee.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillZee.Domain.Entities.OrderSpeed", "OrderSpeed")
                        .WithMany("Orders")
                        .HasForeignKey("OrderSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillZee.Domain.Entities.User", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");

                    b.Navigation("Area");

                    b.Navigation("Customer");

                    b.Navigation("OrderSpeed");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.OrderResult", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.Order", "Order")
                        .WithOne("Result")
                        .HasForeignKey("SkillZee.Domain.Entities.OrderResult", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Tip", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.OrderResult", "Result")
                        .WithOne("Tip")
                        .HasForeignKey("SkillZee.Domain.Entities.Tip", "ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.WorkerInfo", b =>
                {
                    b.HasOne("SkillZee.Domain.Entities.User", "Worker")
                        .WithOne("WorkerInfo")
                        .HasForeignKey("SkillZee.Domain.Entities.WorkerInfo", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Area", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.Order", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.OrderResult", b =>
                {
                    b.Navigation("Tip");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.OrderSpeed", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkillZee.Domain.Entities.User", b =>
                {
                    b.Navigation("BalanceTransactions");

                    b.Navigation("WorkerInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
